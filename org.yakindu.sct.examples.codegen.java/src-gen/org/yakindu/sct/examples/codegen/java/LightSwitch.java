/** Generated by YAKINDU Statechart Tools code generator. */
package org.yakindu.sct.examples.codegen.java;


public class LightSwitch implements ILightSwitch {
	protected class InterfaceUserImpl implements InterfaceUser {
	
		private boolean on_button;
		
		
		public void raiseOn_button() {
			on_button = true;
			runCycle();
		}
		
		private boolean off_button;
		
		
		public void raiseOff_button() {
			off_button = true;
			runCycle();
		}
		
		private long brightness;
		
		public long getBrightness() {
			return brightness;
		}
		
		public void setBrightness(long value) {
			this.brightness = value;
		}
		
	}
	
	protected InterfaceUserImpl interfaceUser;
	
	private boolean initialized = false;
	
	public enum State {
		MAIN_REGION_OFF,
		MAIN_REGION_ON,
		$NULLSTATE$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		return isExecuting;
	}
	
	protected void setIsExecuting(boolean value) {
		this.isExecuting = value;
	}
	public LightSwitch() {
		interfaceUser = new InterfaceUserImpl();
	}
	
	public void init() {
		this.initialized = true;
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		
		interfaceUser.setBrightness(0);
		
		isExecuting = false;
	}
	
	public void enter() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		enterSequence_main_region_default();
		isExecuting = false;
	}
	
	public void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		exitSequence_main_region();
		isExecuting = false;
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case MAIN_REGION_OFF:
				main_region_Off_react(true);
				break;
			case MAIN_REGION_ON:
				main_region_On_react(true);
				break;
			default:
				// $NULLSTATE$
			}
		}
		
		clearInEvents();
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		interfaceUser.on_button = false;
		interfaceUser.off_button = false;
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_REGION_OFF:
			return stateVector[0] == State.MAIN_REGION_OFF;
		case MAIN_REGION_ON:
			return stateVector[0] == State.MAIN_REGION_ON;
		default:
			return false;
		}
	}
	
	public InterfaceUser getInterfaceUser() {
		return interfaceUser;
	}
	
	/* Entry action for state 'Off'. */
	private void entryAction_main_region_Off() {
		interfaceUser.setBrightness(0);
	}
	
	/* 'default' enter sequence for state Off */
	private void enterSequence_main_region_Off_default() {
		entryAction_main_region_Off();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_OFF;
	}
	
	/* 'default' enter sequence for state On */
	private void enterSequence_main_region_On_default() {
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_REGION_ON;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state Off */
	private void exitSequence_main_region_Off() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state On */
	private void exitSequence_main_region_On() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case MAIN_REGION_OFF:
			exitSequence_main_region_Off();
			break;
		case MAIN_REGION_ON:
			exitSequence_main_region_On();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_Off_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_Off_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (interfaceUser.on_button) {
					exitSequence_main_region_Off();
					interfaceUser.setBrightness(1);
					
					enterSequence_main_region_On_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_On_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (interfaceUser.off_button) {
					exitSequence_main_region_On();
					enterSequence_main_region_Off_default();
				} else {
					if (((interfaceUser.on_button) && (interfaceUser.getBrightness()<10))) {
						exitSequence_main_region_On();
						interfaceUser.setBrightness(interfaceUser.getBrightness() + 1);
						
						enterSequence_main_region_On_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
}
