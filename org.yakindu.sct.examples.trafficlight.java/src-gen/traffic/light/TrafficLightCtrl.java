/** Generated by YAKINDU Statechart Tools code generator. */
package traffic.light;

import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import org.yakindu.sct.ITimer;
import org.yakindu.sct.rx.Observable;

public class TrafficLightCtrl implements ITrafficLightCtrl {
	protected class InterfaceImpl implements Interface {
	
		private boolean police_interrupt;
		
		
		public void raisePolice_interrupt() {
			synchronized(TrafficLightCtrl.this) {
				police_interrupt = true;
				runCycle();
			}
		}
		
		private boolean toggle;
		
		
		public void raiseToggle() {
			synchronized(TrafficLightCtrl.this) {
				toggle = true;
				runCycle();
			}
		}
		
		private long redPeriod;
		
		public synchronized long getRedPeriod() {
			synchronized(TrafficLightCtrl.this) {
				return redPeriod;
			}
		}
		
		public void setRedPeriod(long value) {
			synchronized(TrafficLightCtrl.this) {
				this.redPeriod = value;
			}
		}
		
		private long greenPeriod;
		
		public synchronized long getGreenPeriod() {
			synchronized(TrafficLightCtrl.this) {
				return greenPeriod;
			}
		}
		
		public void setGreenPeriod(long value) {
			synchronized(TrafficLightCtrl.this) {
				this.greenPeriod = value;
			}
		}
		
		private long yellowPeriod;
		
		public synchronized long getYellowPeriod() {
			synchronized(TrafficLightCtrl.this) {
				return yellowPeriod;
			}
		}
		
		public void setYellowPeriod(long value) {
			synchronized(TrafficLightCtrl.this) {
				this.yellowPeriod = value;
			}
		}
		
	}
	
	protected class InterfaceTrafficLightImpl implements InterfaceTrafficLight {
	
		private List<InterfaceTrafficLightListener> listeners = new LinkedList<InterfaceTrafficLightListener>();
		
		public List<InterfaceTrafficLightListener> getListeners() {
			return listeners;
		}
		private boolean displayRed;
		
		
		protected void raiseDisplayRed() {
			synchronized(TrafficLightCtrl.this) {
				displayRed = true;
				for (InterfaceTrafficLightListener listener : listeners) {
					listener.onDisplayRedRaised();
				}
				displayRedObservable.next(null);
			}
		}
		
		private Observable<Void> displayRedObservable = new Observable<Void>();
		
		public Observable<Void> getDisplayRed() {
			return displayRedObservable;
		}
		
		private boolean displayGreen;
		
		
		protected void raiseDisplayGreen() {
			synchronized(TrafficLightCtrl.this) {
				displayGreen = true;
				for (InterfaceTrafficLightListener listener : listeners) {
					listener.onDisplayGreenRaised();
				}
				displayGreenObservable.next(null);
			}
		}
		
		private Observable<Void> displayGreenObservable = new Observable<Void>();
		
		public Observable<Void> getDisplayGreen() {
			return displayGreenObservable;
		}
		
		private boolean displayYellow;
		
		
		protected void raiseDisplayYellow() {
			synchronized(TrafficLightCtrl.this) {
				displayYellow = true;
				for (InterfaceTrafficLightListener listener : listeners) {
					listener.onDisplayYellowRaised();
				}
				displayYellowObservable.next(null);
			}
		}
		
		private Observable<Void> displayYellowObservable = new Observable<Void>();
		
		public Observable<Void> getDisplayYellow() {
			return displayYellowObservable;
		}
		
		private boolean displayNone;
		
		
		protected void raiseDisplayNone() {
			synchronized(TrafficLightCtrl.this) {
				displayNone = true;
				for (InterfaceTrafficLightListener listener : listeners) {
					listener.onDisplayNoneRaised();
				}
				displayNoneObservable.next(null);
			}
		}
		
		private Observable<Void> displayNoneObservable = new Observable<Void>();
		
		public Observable<Void> getDisplayNone() {
			return displayNoneObservable;
		}
		
	}
	
	protected class InterfaceTimerImpl implements InterfaceTimer {
	
		private List<InterfaceTimerListener> listeners = new LinkedList<InterfaceTimerListener>();
		
		public List<InterfaceTimerListener> getListeners() {
			return listeners;
		}
		private boolean updateTimerColour;
		
		private String updateTimerColourValue;
		
		
		protected void raiseUpdateTimerColour(String value) {
			synchronized(TrafficLightCtrl.this) {
				updateTimerColourValue = value;
				updateTimerColour = true;
				for (InterfaceTimerListener listener : listeners) {
					listener.onUpdateTimerColourRaised(value);
				}
				updateTimerColourObservable.next(value);
			}
		}
		
		private Observable<String> updateTimerColourObservable = new Observable<String>();
		
		public Observable<String> getUpdateTimerColour() {
			return updateTimerColourObservable;
		}
		
		private boolean updateTimerValue;
		
		private long updateTimerValueValue;
		
		
		protected void raiseUpdateTimerValue(long value) {
			synchronized(TrafficLightCtrl.this) {
				updateTimerValueValue = value;
				updateTimerValue = true;
				for (InterfaceTimerListener listener : listeners) {
					listener.onUpdateTimerValueRaised(value);
				}
				updateTimerValueObservable.next(value);
			}
		}
		
		private Observable<Long> updateTimerValueObservable = new Observable<Long>();
		
		public Observable<Long> getUpdateTimerValue() {
			return updateTimerValueObservable;
		}
		
		public synchronized long getOFF() {
			synchronized(TrafficLightCtrl.this) {
				return oFF;
			}
		}
		
	}
	
	protected InterfaceImpl defaultInterface;
	
	protected InterfaceTrafficLightImpl interfaceTrafficLight;
	
	protected InterfaceTimerImpl interfaceTimer;
	
	private boolean initialized = false;
	
	public enum State {
		MAIN_MAIN,
		MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED,
		MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_BLACK,
		MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_YELLOW,
		MAIN_MAIN_TRAFFICLIGHT_NORMAL,
		MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_RED,
		MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_YELLOW,
		MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_GREEN,
		MAIN_MAIN_TIMER_DISABLED,
		MAIN_MAIN_TIMER_RUNNING,
		MAIN_MAIN_TIMER_RUNNING_RUNNING_GREEN,
		MAIN_MAIN_TIMER_RUNNING_RUNNING_RED,
		MAIN_OFF,
		$NULLSTATE$
	};
	
	private State[] historyVector = new State[3];
	private final State[] stateVector = new State[2];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[7];
	
	private Queue<Runnable> internalEventQueue = new LinkedList<Runnable>();
	private boolean resetTimer;
	private boolean disableTimer;
	private boolean enableTimer;
	private long counter;
	
	protected long getCounter() {
		synchronized(TrafficLightCtrl.this) {
			return counter;
		}
	}
	
	protected void setCounter(long value) {
		synchronized(TrafficLightCtrl.this) {
			this.counter = value;
		}
	}
	
	
	private boolean isExecuting;
	
	protected boolean getIsExecuting() {
		synchronized(TrafficLightCtrl.this) {
			return isExecuting;
		}
	}
	
	protected void setIsExecuting(boolean value) {
		synchronized(TrafficLightCtrl.this) {
			this.isExecuting = value;
		}
	}
	public TrafficLightCtrl() {
		defaultInterface = new InterfaceImpl();
		interfaceTrafficLight = new InterfaceTrafficLightImpl();
		interfaceTimer = new InterfaceTimerImpl();
	}
	
	public synchronized void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		for (int i = 0; i < 2; i++) {
			stateVector[i] = State.$NULLSTATE$;
		}
		for (int i = 0; i < 3; i++) {
			historyVector[i] = State.$NULLSTATE$;
		}
		
		clearInEvents();
		clearInternalEvents();
		
		defaultInterface.setRedPeriod(12);
		
		defaultInterface.setGreenPeriod(8);
		
		defaultInterface.setYellowPeriod(3);
		
		setCounter(0);
		
		isExecuting = false;
	}
	
	public synchronized void enter() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		enterSequence_main_default();
		isExecuting = false;
	}
	
	public synchronized void exit() {
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		exitSequence_main();
		isExecuting = false;
	}
	
	public synchronized void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
			        "The state machine needs to be initialized first by calling the init() function.");
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		
		if (getIsExecuting()) {
			return;
		}
		isExecuting = true;
		nextEvent();
		do { 
			for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
				switch (stateVector[nextStateIndex]) {
				case MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_BLACK:
					main_main_trafficlight_interrupted_blinking_Black_react(true);
					break;
				case MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_YELLOW:
					main_main_trafficlight_interrupted_blinking_Yellow_react(true);
					break;
				case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_RED:
					main_main_trafficlight_normal_normal_Red_react(true);
					break;
				case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_YELLOW:
					main_main_trafficlight_normal_normal_Yellow_react(true);
					break;
				case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_GREEN:
					main_main_trafficlight_normal_normal_Green_react(true);
					break;
				case MAIN_MAIN_TIMER_DISABLED:
					main_main_timer_disabled_react(true);
					break;
				case MAIN_MAIN_TIMER_RUNNING_RUNNING_GREEN:
					main_main_timer_running_running_Green_react(true);
					break;
				case MAIN_MAIN_TIMER_RUNNING_RUNNING_RED:
					main_main_timer_running_running_Red_react(true);
					break;
				case MAIN_OFF:
					main_off_react(true);
					break;
				default:
					// $NULLSTATE$
				}
			}
			
			clearInEvents();
			clearInternalEvents();
			nextEvent();
		} while ((((((((((((defaultInterface.police_interrupt || defaultInterface.toggle) || resetTimer) || disableTimer) || enableTimer) || timeEvents[0]) || timeEvents[1]) || timeEvents[2]) || timeEvents[3]) || timeEvents[4]) || timeEvents[5]) || timeEvents[6]));
		
		isExecuting = false;
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NULLSTATE$||stateVector[1] != State.$NULLSTATE$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	private void clearInEvents() {
		defaultInterface.police_interrupt = false;
		defaultInterface.toggle = false;
		timeEvents[0] = false;
		timeEvents[1] = false;
		timeEvents[2] = false;
		timeEvents[3] = false;
		timeEvents[4] = false;
		timeEvents[5] = false;
		timeEvents[6] = false;
	}
	
	private void clearInternalEvents() {
		resetTimer = false;
		disableTimer = false;
		enableTimer = false;
	}
	
	protected void nextEvent() {
		if(!internalEventQueue.isEmpty()) {
			internalEventQueue.poll().run();
			return;
		}
	}
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case MAIN_MAIN:
			return stateVector[0].ordinal() >= State.
					MAIN_MAIN.ordinal()&& stateVector[0].ordinal() <= State.MAIN_MAIN_TIMER_RUNNING_RUNNING_RED.ordinal();
		case MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED:
			return stateVector[0].ordinal() >= State.
					MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED.ordinal()&& stateVector[0].ordinal() <= State.MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_YELLOW.ordinal();
		case MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_BLACK:
			return stateVector[0] == State.MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_BLACK;
		case MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_YELLOW:
			return stateVector[0] == State.MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_YELLOW;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL:
			return stateVector[0].ordinal() >= State.
					MAIN_MAIN_TRAFFICLIGHT_NORMAL.ordinal()&& stateVector[0].ordinal() <= State.MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_GREEN.ordinal();
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_RED:
			return stateVector[0] == State.MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_RED;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_YELLOW:
			return stateVector[0] == State.MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_YELLOW;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_GREEN:
			return stateVector[0] == State.MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_GREEN;
		case MAIN_MAIN_TIMER_DISABLED:
			return stateVector[1] == State.MAIN_MAIN_TIMER_DISABLED;
		case MAIN_MAIN_TIMER_RUNNING:
			return stateVector[1].ordinal() >= State.
					MAIN_MAIN_TIMER_RUNNING.ordinal()&& stateVector[1].ordinal() <= State.MAIN_MAIN_TIMER_RUNNING_RUNNING_RED.ordinal();
		case MAIN_MAIN_TIMER_RUNNING_RUNNING_GREEN:
			return stateVector[1] == State.MAIN_MAIN_TIMER_RUNNING_RUNNING_GREEN;
		case MAIN_MAIN_TIMER_RUNNING_RUNNING_RED:
			return stateVector[1] == State.MAIN_MAIN_TIMER_RUNNING_RUNNING_RED;
		case MAIN_OFF:
			return stateVector[0] == State.MAIN_OFF;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public synchronized void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public synchronized void timeElapsed(int eventID) {
		timeEvents[eventID] = true;
		runCycle();
	}
	
	public Interface getInterface() {
		return defaultInterface;
	}
	
	public InterfaceTrafficLight getInterfaceTrafficLight() {
		return interfaceTrafficLight;
	}
	
	public InterfaceTimer getInterfaceTimer() {
		return interfaceTimer;
	}
	
	private void raiseResetTimer() {
	
		internalEventQueue.add(new Runnable() {
			@Override public void run() {
				resetTimer = true;					
			}
		});
	}
	
	private void raiseDisableTimer() {
	
		internalEventQueue.add(new Runnable() {
			@Override public void run() {
				disableTimer = true;					
			}
		});
	}
	
	private void raiseEnableTimer() {
	
		internalEventQueue.add(new Runnable() {
			@Override public void run() {
				enableTimer = true;					
			}
		});
	}
	
	public synchronized void raisePolice_interrupt() {
		defaultInterface.raisePolice_interrupt();
	}
	
	public synchronized void raiseToggle() {
		defaultInterface.raiseToggle();
	}
	
	public synchronized long getRedPeriod() {
		return defaultInterface.getRedPeriod();
	}
	
	public synchronized void setRedPeriod(long value) {
		defaultInterface.setRedPeriod(value);
	}
	
	public synchronized long getGreenPeriod() {
		return defaultInterface.getGreenPeriod();
	}
	
	public synchronized void setGreenPeriod(long value) {
		defaultInterface.setGreenPeriod(value);
	}
	
	public synchronized long getYellowPeriod() {
		return defaultInterface.getYellowPeriod();
	}
	
	public synchronized void setYellowPeriod(long value) {
		defaultInterface.setYellowPeriod(value);
	}
	
	private boolean check_main_main_timer_running_running__choice_0_tr0_tr0() {
		return isStateActive(State.MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_GREEN);
	}
	
	private void effect_main_main_timer_running_running__choice_0_tr0() {
		interfaceTimer.raiseUpdateTimerColour("Green");
		
		enterSequence_main_main_timer_running_running_Green_default();
	}
	
	private void effect_main_main_timer_running_running__choice_0_tr1() {
		interfaceTimer.raiseUpdateTimerColour("Red");
		
		enterSequence_main_main_timer_running_running_Red_default();
	}
	
	/* Entry action for state 'Black'. */
	private void entryAction_main_main_trafficlight_interrupted_blinking_Black() {
		timer.setTimer(this, 0, 500, false);
		
		interfaceTrafficLight.raiseDisplayNone();
	}
	
	/* Entry action for state 'Yellow'. */
	private void entryAction_main_main_trafficlight_interrupted_blinking_Yellow() {
		timer.setTimer(this, 1, 500, false);
		
		interfaceTrafficLight.raiseDisplayYellow();
	}
	
	/* Entry action for state 'Red'. */
	private void entryAction_main_main_trafficlight_normal_normal_Red() {
		timer.setTimer(this, 2, (defaultInterface.getRedPeriod() * 1000), false);
		
		interfaceTrafficLight.raiseDisplayRed();
		
		setCounter(defaultInterface.redPeriod);
		
		raiseResetTimer();
	}
	
	/* Entry action for state 'Yellow'. */
	private void entryAction_main_main_trafficlight_normal_normal_Yellow() {
		timer.setTimer(this, 3, (defaultInterface.getYellowPeriod() * 1000), false);
		
		interfaceTrafficLight.raiseDisplayYellow();
		
		raiseDisableTimer();
	}
	
	/* Entry action for state 'Green'. */
	private void entryAction_main_main_trafficlight_normal_normal_Green() {
		timer.setTimer(this, 4, (defaultInterface.getGreenPeriod() * 1000), false);
		
		interfaceTrafficLight.raiseDisplayGreen();
		
		setCounter(defaultInterface.greenPeriod);
		
		raiseResetTimer();
	}
	
	/* Entry action for state 'Green'. */
	private void entryAction_main_main_timer_running_running_Green() {
		timer.setTimer(this, 5, (1 * 1000), false);
		
		interfaceTimer.raiseUpdateTimerValue(getCounter());
	}
	
	/* Entry action for state 'Red'. */
	private void entryAction_main_main_timer_running_running_Red() {
		timer.setTimer(this, 6, (1 * 1000), false);
		
		interfaceTimer.raiseUpdateTimerValue(getCounter());
	}
	
	/* Exit action for state 'main'. */
	private void exitAction_main_main() {
		interfaceTrafficLight.raiseDisplayNone();
	}
	
	/* Exit action for state 'Black'. */
	private void exitAction_main_main_trafficlight_interrupted_blinking_Black() {
		timer.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Yellow'. */
	private void exitAction_main_main_trafficlight_interrupted_blinking_Yellow() {
		timer.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'Red'. */
	private void exitAction_main_main_trafficlight_normal_normal_Red() {
		timer.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'Yellow'. */
	private void exitAction_main_main_trafficlight_normal_normal_Yellow() {
		timer.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'Green'. */
	private void exitAction_main_main_trafficlight_normal_normal_Green() {
		timer.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'running'. */
	private void exitAction_main_main_timer_running() {
		interfaceTimer.raiseUpdateTimerValue(interfaceTimer.getOFF());
	}
	
	/* Exit action for state 'Green'. */
	private void exitAction_main_main_timer_running_running_Green() {
		timer.unsetTimer(this, 5);
	}
	
	/* Exit action for state 'Red'. */
	private void exitAction_main_main_timer_running_running_Red() {
		timer.unsetTimer(this, 6);
	}
	
	/* 'default' enter sequence for state main */
	private void enterSequence_main_main_default() {
		enterSequence_main_main_trafficlight_default();
		enterSequence_main_main_timer_default();
	}
	
	/* 'default' enter sequence for state interrupted */
	private void enterSequence_main_main_trafficlight_interrupted_default() {
		enterSequence_main_main_trafficlight_interrupted_blinking_default();
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Black */
	private void enterSequence_main_main_trafficlight_interrupted_blinking_Black_default() {
		entryAction_main_main_trafficlight_interrupted_blinking_Black();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_BLACK;
		
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Yellow */
	private void enterSequence_main_main_trafficlight_interrupted_blinking_Yellow_default() {
		entryAction_main_main_trafficlight_interrupted_blinking_Yellow();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_YELLOW;
		
		historyVector[1] = stateVector[0];
	}
	
	/* 'default' enter sequence for state normal */
	private void enterSequence_main_main_trafficlight_normal_default() {
		enterSequence_main_main_trafficlight_normal_normal_default();
		historyVector[0] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Red */
	private void enterSequence_main_main_trafficlight_normal_normal_Red_default() {
		entryAction_main_main_trafficlight_normal_normal_Red();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_RED;
		
		historyVector[2] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Yellow */
	private void enterSequence_main_main_trafficlight_normal_normal_Yellow_default() {
		entryAction_main_main_trafficlight_normal_normal_Yellow();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_YELLOW;
		
		historyVector[2] = stateVector[0];
	}
	
	/* 'default' enter sequence for state Green */
	private void enterSequence_main_main_trafficlight_normal_normal_Green_default() {
		entryAction_main_main_trafficlight_normal_normal_Green();
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_GREEN;
		
		historyVector[2] = stateVector[0];
	}
	
	/* 'default' enter sequence for state disabled */
	private void enterSequence_main_main_timer_disabled_default() {
		nextStateIndex = 1;
		stateVector[1] = State.MAIN_MAIN_TIMER_DISABLED;
	}
	
	/* 'default' enter sequence for state running */
	private void enterSequence_main_main_timer_running_default() {
		enterSequence_main_main_timer_running_running_default();
	}
	
	/* 'default' enter sequence for state Green */
	private void enterSequence_main_main_timer_running_running_Green_default() {
		entryAction_main_main_timer_running_running_Green();
		nextStateIndex = 1;
		stateVector[1] = State.MAIN_MAIN_TIMER_RUNNING_RUNNING_GREEN;
	}
	
	/* 'default' enter sequence for state Red */
	private void enterSequence_main_main_timer_running_running_Red_default() {
		entryAction_main_main_timer_running_running_Red();
		nextStateIndex = 1;
		stateVector[1] = State.MAIN_MAIN_TIMER_RUNNING_RUNNING_RED;
	}
	
	/* 'default' enter sequence for state off */
	private void enterSequence_main_off_default() {
		nextStateIndex = 0;
		stateVector[0] = State.MAIN_OFF;
	}
	
	/* 'default' enter sequence for region main */
	private void enterSequence_main_default() {
		react_main__entry_Default();
	}
	
	/* 'default' enter sequence for region trafficlight */
	private void enterSequence_main_main_trafficlight_default() {
		react_main_main_trafficlight__entry_Default();
	}
	
	/* deep enterSequence with history in child trafficlight */
	private void deepEnterSequence_main_main_trafficlight() {
		switch (historyVector[0]) {
		case MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_BLACK:
			deepEnterSequence_main_main_trafficlight_interrupted_blinking();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_YELLOW:
			deepEnterSequence_main_main_trafficlight_interrupted_blinking();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_RED:
			deepEnterSequence_main_main_trafficlight_normal_normal();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_YELLOW:
			deepEnterSequence_main_main_trafficlight_normal_normal();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_GREEN:
			deepEnterSequence_main_main_trafficlight_normal_normal();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region blinking */
	private void enterSequence_main_main_trafficlight_interrupted_blinking_default() {
		react_main_main_trafficlight_interrupted_blinking__entry_Default();
	}
	
	/* deep enterSequence with history in child blinking */
	private void deepEnterSequence_main_main_trafficlight_interrupted_blinking() {
		switch (historyVector[1]) {
		case MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_BLACK:
			enterSequence_main_main_trafficlight_interrupted_blinking_Black_default();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_YELLOW:
			enterSequence_main_main_trafficlight_interrupted_blinking_Yellow_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region normal */
	private void enterSequence_main_main_trafficlight_normal_normal_default() {
		react_main_main_trafficlight_normal_normal__entry_Default();
	}
	
	/* deep enterSequence with history in child normal */
	private void deepEnterSequence_main_main_trafficlight_normal_normal() {
		switch (historyVector[2]) {
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_RED:
			enterSequence_main_main_trafficlight_normal_normal_Red_default();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_YELLOW:
			enterSequence_main_main_trafficlight_normal_normal_Yellow_default();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_GREEN:
			enterSequence_main_main_trafficlight_normal_normal_Green_default();
			break;
		default:
			break;
		}
	}
	
	/* shallow enterSequence with history in child normal */
	private void shallowEnterSequence_main_main_trafficlight_normal_normal() {
		switch (historyVector[2]) {
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_RED:
			enterSequence_main_main_trafficlight_normal_normal_Red_default();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_YELLOW:
			enterSequence_main_main_trafficlight_normal_normal_Yellow_default();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_GREEN:
			enterSequence_main_main_trafficlight_normal_normal_Green_default();
			break;
		default:
			break;
		}
	}
	
	/* 'default' enter sequence for region timer */
	private void enterSequence_main_main_timer_default() {
		react_main_main_timer__entry_Default();
	}
	
	/* 'default' enter sequence for region running */
	private void enterSequence_main_main_timer_running_running_default() {
		react_main_main_timer_running_running__entry_Default();
	}
	
	/* Default exit sequence for state main */
	private void exitSequence_main_main() {
		exitSequence_main_main_trafficlight();
		exitSequence_main_main_timer();
		exitAction_main_main();
	}
	
	/* Default exit sequence for state interrupted */
	private void exitSequence_main_main_trafficlight_interrupted() {
		exitSequence_main_main_trafficlight_interrupted_blinking();
	}
	
	/* Default exit sequence for state Black */
	private void exitSequence_main_main_trafficlight_interrupted_blinking_Black() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_main_trafficlight_interrupted_blinking_Black();
	}
	
	/* Default exit sequence for state Yellow */
	private void exitSequence_main_main_trafficlight_interrupted_blinking_Yellow() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_main_trafficlight_interrupted_blinking_Yellow();
	}
	
	/* Default exit sequence for state normal */
	private void exitSequence_main_main_trafficlight_normal() {
		exitSequence_main_main_trafficlight_normal_normal();
	}
	
	/* Default exit sequence for state Red */
	private void exitSequence_main_main_trafficlight_normal_normal_Red() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_main_trafficlight_normal_normal_Red();
	}
	
	/* Default exit sequence for state Yellow */
	private void exitSequence_main_main_trafficlight_normal_normal_Yellow() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_main_trafficlight_normal_normal_Yellow();
	}
	
	/* Default exit sequence for state Green */
	private void exitSequence_main_main_trafficlight_normal_normal_Green() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
		
		exitAction_main_main_trafficlight_normal_normal_Green();
	}
	
	/* Default exit sequence for state disabled */
	private void exitSequence_main_main_timer_disabled() {
		nextStateIndex = 1;
		stateVector[1] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for state running */
	private void exitSequence_main_main_timer_running() {
		exitSequence_main_main_timer_running_running();
		exitAction_main_main_timer_running();
	}
	
	/* Default exit sequence for state Green */
	private void exitSequence_main_main_timer_running_running_Green() {
		nextStateIndex = 1;
		stateVector[1] = State.$NULLSTATE$;
		
		exitAction_main_main_timer_running_running_Green();
	}
	
	/* Default exit sequence for state Red */
	private void exitSequence_main_main_timer_running_running_Red() {
		nextStateIndex = 1;
		stateVector[1] = State.$NULLSTATE$;
		
		exitAction_main_main_timer_running_running_Red();
	}
	
	/* Default exit sequence for state off */
	private void exitSequence_main_off() {
		nextStateIndex = 0;
		stateVector[0] = State.$NULLSTATE$;
	}
	
	/* Default exit sequence for region main */
	private void exitSequence_main() {
		switch (stateVector[0]) {
		case MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_BLACK:
			exitSequence_main_main_trafficlight_interrupted_blinking_Black();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_YELLOW:
			exitSequence_main_main_trafficlight_interrupted_blinking_Yellow();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_RED:
			exitSequence_main_main_trafficlight_normal_normal_Red();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_YELLOW:
			exitSequence_main_main_trafficlight_normal_normal_Yellow();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_GREEN:
			exitSequence_main_main_trafficlight_normal_normal_Green();
			break;
		case MAIN_OFF:
			exitSequence_main_off();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case MAIN_MAIN_TIMER_DISABLED:
			exitSequence_main_main_timer_disabled();
			exitAction_main_main();
			break;
		case MAIN_MAIN_TIMER_RUNNING_RUNNING_GREEN:
			exitSequence_main_main_timer_running_running_Green();
			exitAction_main_main_timer_running();
			exitAction_main_main();
			break;
		case MAIN_MAIN_TIMER_RUNNING_RUNNING_RED:
			exitSequence_main_main_timer_running_running_Red();
			exitAction_main_main_timer_running();
			exitAction_main_main();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region trafficlight */
	private void exitSequence_main_main_trafficlight() {
		switch (stateVector[0]) {
		case MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_BLACK:
			exitSequence_main_main_trafficlight_interrupted_blinking_Black();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_YELLOW:
			exitSequence_main_main_trafficlight_interrupted_blinking_Yellow();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_RED:
			exitSequence_main_main_trafficlight_normal_normal_Red();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_YELLOW:
			exitSequence_main_main_trafficlight_normal_normal_Yellow();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_GREEN:
			exitSequence_main_main_trafficlight_normal_normal_Green();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region blinking */
	private void exitSequence_main_main_trafficlight_interrupted_blinking() {
		switch (stateVector[0]) {
		case MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_BLACK:
			exitSequence_main_main_trafficlight_interrupted_blinking_Black();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_INTERRUPTED_BLINKING_YELLOW:
			exitSequence_main_main_trafficlight_interrupted_blinking_Yellow();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region normal */
	private void exitSequence_main_main_trafficlight_normal_normal() {
		switch (stateVector[0]) {
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_RED:
			exitSequence_main_main_trafficlight_normal_normal_Red();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_YELLOW:
			exitSequence_main_main_trafficlight_normal_normal_Yellow();
			break;
		case MAIN_MAIN_TRAFFICLIGHT_NORMAL_NORMAL_GREEN:
			exitSequence_main_main_trafficlight_normal_normal_Green();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region timer */
	private void exitSequence_main_main_timer() {
		switch (stateVector[1]) {
		case MAIN_MAIN_TIMER_DISABLED:
			exitSequence_main_main_timer_disabled();
			break;
		case MAIN_MAIN_TIMER_RUNNING_RUNNING_GREEN:
			exitSequence_main_main_timer_running_running_Green();
			exitAction_main_main_timer_running();
			break;
		case MAIN_MAIN_TIMER_RUNNING_RUNNING_RED:
			exitSequence_main_main_timer_running_running_Red();
			exitAction_main_main_timer_running();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region running */
	private void exitSequence_main_main_timer_running_running() {
		switch (stateVector[1]) {
		case MAIN_MAIN_TIMER_RUNNING_RUNNING_GREEN:
			exitSequence_main_main_timer_running_running_Green();
			break;
		case MAIN_MAIN_TIMER_RUNNING_RUNNING_RED:
			exitSequence_main_main_timer_running_running_Red();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_main_main_timer_running_running__choice_0() {
		if (check_main_main_timer_running_running__choice_0_tr0_tr0()) {
			effect_main_main_timer_running_running__choice_0_tr0();
		} else {
			effect_main_main_timer_running_running__choice_0_tr1();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_main_trafficlight_interrupted_blinking__entry_Default() {
		enterSequence_main_main_trafficlight_interrupted_blinking_Yellow_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_main_trafficlight_normal_normal__entry_Default() {
		enterSequence_main_main_trafficlight_normal_normal_Red_default();
	}
	
	/* Default react sequence for shallow history entry hist */
	private void react_main_main_trafficlight_normal_normal_hist() {
		/* Enter the region with shallow history */
		if (historyVector[2] != State.$NULLSTATE$) {
			shallowEnterSequence_main_main_trafficlight_normal_normal();
		} else {
			enterSequence_main_main_trafficlight_normal_normal_Red_default();
		}
	}
	
	/* Default react sequence for deep history entry  */
	private void react_main_main_trafficlight__entry_Default() {
		/* Enter the region with deep history */
		if (historyVector[0] != State.$NULLSTATE$) {
			deepEnterSequence_main_main_trafficlight();
		} else {
			enterSequence_main_main_trafficlight_normal_default();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_main_timer_running_running__entry_Default() {
		react_main_main_timer_running_running__choice_0();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_main_timer__entry_Default() {
		enterSequence_main_main_timer_running_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main__entry_Default() {
		enterSequence_main_off_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_main_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (defaultInterface.toggle) {
				exitSequence_main_main();
				enterSequence_main_off_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_main_trafficlight_interrupted_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (defaultInterface.police_interrupt) {
				exitSequence_main_main_trafficlight_interrupted();
				raiseEnableTimer();
				
				react_main_main_trafficlight_normal_normal_hist();
				historyVector[0] = stateVector[0];
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_main_trafficlight_interrupted_blinking_Black_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[0]) {
				exitSequence_main_main_trafficlight_interrupted_blinking_Black();
				enterSequence_main_main_trafficlight_interrupted_blinking_Yellow_default();
				main_main_trafficlight_interrupted_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_main_trafficlight_interrupted_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_main_trafficlight_interrupted_blinking_Yellow_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[1]) {
				exitSequence_main_main_trafficlight_interrupted_blinking_Yellow();
				enterSequence_main_main_trafficlight_interrupted_blinking_Black_default();
				main_main_trafficlight_interrupted_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_main_trafficlight_interrupted_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_main_trafficlight_normal_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (defaultInterface.police_interrupt) {
				exitSequence_main_main_trafficlight_normal();
				raiseDisableTimer();
				
				enterSequence_main_main_trafficlight_interrupted_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_main_trafficlight_normal_normal_Red_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[2]) {
				exitSequence_main_main_trafficlight_normal_normal_Red();
				enterSequence_main_main_trafficlight_normal_normal_Green_default();
				main_main_trafficlight_normal_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_main_trafficlight_normal_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_main_trafficlight_normal_normal_Yellow_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[3]) {
				exitSequence_main_main_trafficlight_normal_normal_Yellow();
				raiseEnableTimer();
				
				enterSequence_main_main_trafficlight_normal_normal_Red_default();
				main_main_trafficlight_normal_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_main_trafficlight_normal_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_main_trafficlight_normal_normal_Green_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[4]) {
				exitSequence_main_main_trafficlight_normal_normal_Green();
				enterSequence_main_main_trafficlight_normal_normal_Yellow_default();
				main_main_trafficlight_normal_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_main_trafficlight_normal_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_main_timer_disabled_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (enableTimer) {
				exitSequence_main_main_timer_disabled();
				enterSequence_main_main_timer_running_default();
				main_main_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_main_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_main_timer_running_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (disableTimer) {
				exitSequence_main_main_timer_running();
				enterSequence_main_main_timer_disabled_default();
				main_main_react(false);
			} else {
				if (resetTimer) {
					exitSequence_main_main_timer_running();
					enterSequence_main_main_timer_running_default();
					main_main_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_main_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_main_timer_running_running_Green_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[5]) {
				exitSequence_main_main_timer_running_running_Green();
				setCounter(getCounter() - 1);
				
				enterSequence_main_main_timer_running_running_Green_default();
				main_main_timer_running_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_main_timer_running_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_main_timer_running_running_Red_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[6]) {
				exitSequence_main_main_timer_running_running_Red();
				setCounter(getCounter() - 1);
				
				enterSequence_main_main_timer_running_running_Red_default();
				main_main_timer_running_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_main_timer_running_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_off_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (defaultInterface.toggle) {
				exitSequence_main_off();
				enterSequence_main_main_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
}
