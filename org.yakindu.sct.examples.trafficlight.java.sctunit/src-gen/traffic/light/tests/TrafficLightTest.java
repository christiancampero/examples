/** Generated by YAKINDU Statechart Tools code generator. */

package traffic.light.tests;

import static org.mockito.Mockito.*;
import static org.mockito.Matchers.*;
import static org.hamcrest.CoreMatchers.*;
import traffic.light.ITrafficLightCtrl.*;	
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;
import org.junit.*;
import static org.junit.Assert.*;
import traffic.light.TrafficLightCtrl;
import traffic.light.TrafficLightCtrl.State;
import org.yakindu.sct.VirtualTimer;
import org.yakindu.sct.VirtualTimer.VirtualTimeTask;
import org.yakindu.sct.VirtualTimer.CycleTimeEventTask;

/**
 * Unit TestCase for TrafficLightCtrl
 */
@SuppressWarnings("all")
public class TrafficLightTest {
	InterfaceOperationCallback defaultMock;
	
	private TrafficLightCtrl statemachine;	
	private VirtualTimer timer;
	
	
	@Before
	public void trafficLightTest_setUp() {
		statemachine = new TrafficLightCtrl();
		timer = new VirtualTimer(250);
		timer.schedulePeriodicalTask(new CycleTimeEventTask(statemachine), 250, 250);
		statemachine.setTimer(timer);
		defaultMock = mock(InterfaceOperationCallback.class);
		statemachine.getInterface().setInterfaceOperationCallback(defaultMock);
		
		statemachine.init();
		
	}

	@After
	public void trafficLightTest_tearDown() {
		statemachine.getInterface().setInterfaceOperationCallback(null);
		statemachine = null;
		
		timer = null;
	}
	
	@Test
	public void testInitialState() {
		statemachine.enter();
		assertTrue(statemachine.isStateActive(TrafficLightCtrl.State.MAIN_REGION_OFF));
		assertTrue(statemachine.isStateActive(TrafficLightCtrl.State.MAIN_REGION_OFF_R1_YELLOWON));
		assertFlags(false, true, false, false, false, true);
	}
	
	@Test
	public void testYellowOffAfter500ms() {
		statemachine.enter();
		timer.timeLeap(500l);
		assertTrue(statemachine.isStateActive(TrafficLightCtrl.State.MAIN_REGION_OFF_R1_YELLOWOFF));
		assertFlags(false, false, false, false, false, false);
		verify(defaultMock, atLeastOnce()).synchronize();
		 
	}
	
	@Test
	public void testYellowOnAfter1s() {
		statemachine.enter();
		timer.timeLeap(1l*1000l);
		assertTrue(statemachine.isStateActive(TrafficLightCtrl.State.MAIN_REGION_OFF_R1_YELLOWON));
		assertFlags(false, true, false, false, false, true);
		verify(defaultMock, atLeastOnce()).synchronize();
		 
	}
	
	@Test
	public void testSafeState() {
		statemachine.enter();
		enterSafeState();
		assertTrue(statemachine.isStateActive(TrafficLightCtrl.State.MAIN_REGION_ON));
		assertTrue(statemachine.isStateActive(TrafficLightCtrl.State.MAIN_REGION_ON_R1_SAFE));
		assertFlags(true, false, false, true, false, false);
	}
	
	@Test
	public void testStreetPrepare() {
		statemachine.enter();
		enterSafeState();
		timer.timeLeap(10l*1000l);
		assertTrue(statemachine.isStateActive(TrafficLightCtrl.State.MAIN_REGION_ON_R1_STREETPREPARE));
		assertFlags(true, true, false, true, false, false);
		verify(defaultMock, atLeastOnce()).synchronize();
		 
	}
	
	@Test
	public void testStreetGreen() {
		statemachine.enter();
		testStreetPrepare();
		timer.timeLeap(2l*1000l);
		assertTrue(statemachine.isStateActive(TrafficLightCtrl.State.MAIN_REGION_ON_R1_STREETGREEN));
		assertFlags(false, false, true, true, false, false);
	}
	
	@Test
	public void testPedWaitOn() {
		statemachine.enter();
		testStreetGreen();
		statemachine.raisePedestrianRequest();
		timer.cycleLeap(1l);
		assertTrue(statemachine.isStateActive(TrafficLightCtrl.State.MAIN_REGION_ON_R1_PEDWAITING_R1_WAITON));
		assertFlags(false, false, true, true, false, true);
	}
	
	@Test
	public void testPedWaitOff() {
		statemachine.enter();
		testPedWaitOn();
		timer.timeLeap(500l);
		assertTrue(statemachine.isStateActive(TrafficLightCtrl.State.MAIN_REGION_ON_R1_PEDWAITING_R1_WAITOFF));
		assertFlags(false, false, true, true, false, false);
	}
	
	@Test
	public void testStreetAttention() {
		statemachine.enter();
		testPedWaitOn();
		timer.timeLeap(7l*1000l);
		assertTrue(statemachine.isStateActive(TrafficLightCtrl.State.MAIN_REGION_ON_R1_STREETATTENTION));
		assertFlags(false, true, false, true, false, false);
	}
	
	@Test
	public void testStreetRed() {
		statemachine.enter();
		testStreetAttention();
		timer.timeLeap(2l*1000l);
		assertTrue(statemachine.isStateActive(TrafficLightCtrl.State.MAIN_REGION_ON_R1_STREETRED));
		assertFlags(true, false, false, true, false, false);
	}
	
	@Test
	public void testPedestrianGreen() {
		statemachine.enter();
		testStreetRed();
		timer.timeLeap(2l*1000l);
		assertTrue(statemachine.isStateActive(TrafficLightCtrl.State.MAIN_REGION_ON_R1_PEDESTRIANGREEN));
		assertFlags(true, false, false, false, true, false);
	}
	
	@Test
	public void testPedestrianRed() {
		statemachine.enter();
		testPedestrianGreen();
		timer.timeLeap(7l*1000l);
		assertTrue(statemachine.isStateActive(TrafficLightCtrl.State.MAIN_REGION_ON_R1_PEDESTRIANRED));
		assertFlags(true, false, false, true, false, false);
	}
	
	@Test
	public void testReturnToStreetPrepare() {
		statemachine.enter();
		testPedestrianRed();
		timer.timeLeap(5l*1000l);
		assertTrue(statemachine.isStateActive(TrafficLightCtrl.State.MAIN_REGION_ON_R1_STREETPREPARE));
		assertFlags(true, true, false, true, false, false);
	}
	
	@Test
	public void testReturnToOffState() {
		testStreetAttention();
		statemachine.raiseOnOff();
		timer.cycleLeap(1l);
		assertTrue(statemachine.isStateActive(TrafficLightCtrl.State.MAIN_REGION_OFF));
		assertTrue(statemachine.isStateActive(TrafficLightCtrl.State.MAIN_REGION_OFF_R1_YELLOWON));
		assertFlags(false, true, false, false, false, true);
	}
	
	public void enterSafeState() {
		statemachine.raiseOnOff();
		timer.cycleLeap(1l);
	}
	
	public void assertFlags(boolean trafficRed, boolean trafficYellow, boolean trafficGreen, boolean pedRed, boolean pedGreen, boolean pedRequest) {
		assertTrue(statemachine.getInterfaceTrafficLight().getRed() == trafficRed);
		assertTrue(statemachine.getInterfaceTrafficLight().getYellow() == trafficYellow);
		assertTrue(statemachine.getInterfaceTrafficLight().getGreen() == trafficGreen);
		assertTrue(statemachine.getInterfacePedestrian().getRed() == pedRed);
		assertTrue(statemachine.getInterfacePedestrian().getGreen() == pedGreen);
		assertTrue(statemachine.getInterfacePedestrian().getRequest() == pedRequest);
	}
}
